<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <groupId>com.dianping</groupId>
    <artifactId>Auto-PerformanceTest</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <packaging>jar</packaging>
    <name>Auto-PerformanceTest</name>

    <build>
    <plugins>

        <plugin>
            <groupId>com.lazerycode.jmeter</groupId>
            <artifactId>jmeter-maven-plugin</artifactId>
            <version>1.10.1</version>
            <!-- configure different executions of the plugin -->
            <executions>

                <execution>

                    <!--
                    2) Performance test
                    -->
                    <id>test</id>
                    <phase>integration-test</phase>
                    <goals>
                        <goal>jmeter</goal>
                    </goals>
                    <configuration>
                        <propertiesUser>
                            <!--A user which accesses all URLs-->
                            <threadgroup00.name>posc</threadgroup00.name>
                            <!--number of threads to use-->
                            <threadgroup00.numberOfThreads>30</threadgroup00.numberOfThreads>
                            <!--number of loops-->
                            <threadgroup00.numberOfLoops>2</threadgroup00.numberOfLoops>
                            <!--delay of the test in seconds-->
                            <threadgroup00.scheduledDelay>0</threadgroup00.scheduledDelay>
                            <!--duration of the test in seconds-->
                            <threadgroup00.scheduledDuration>30</threadgroup00.scheduledDuration>
                            <!--how long till all threads are up and running in seconds-->
                            <threadgroup00.rampUp>2</threadgroup00.rampUp>
                            <!--target throughput of all threads of the group per minute-->
                            <!-- <threadgroup00.throughput>100000000</threadgroup00.throughput>-->
                            <!-- use uris from given file -->
                            <!-- <threadgroup00.dataFile>${webapp.uris}</threadgroup00.dataFile>-->
                        </propertiesUser>
                        <ignoreResultFailures>true</ignoreResultFailures>
                        <suppressJMeterOutput>false</suppressJMeterOutput>
                    </configuration>
                </execution>
            </executions>

            <!-- general configuration for all executions -->

            <configuration>
                <!-- configure which testplans to use -->
                <testFilesIncluded>
                    <testFilesIncluded>*.jmx</testFilesIncluded>
                </testFilesIncluded>

                <!-- protocol, server and port of tested webapp -->
                <!--propertiesUser>
                    <protocol>${webapp.protocol}</protocol>
                    <server>${webapp.host}</server>
                    <port>${webapp.port}</port>
                </propertiesUser-->
            </configuration>
        </plugin>

        <plugin>
            <groupId>com.lazerycode.jmeter</groupId>
            <artifactId>jmeter-analysis-maven-plugin</artifactId>
            <version>1.0.6</version>
            <executions>
                <execution>
                    <goals>
                        <goal>analyze</goal>
                    </goals>
                    <phase>post-integration-test</phase>
                    <configuration>
                        <!--
                        source file that contains jmeter result data. Needs to be XML format or a GZIPed XML format
                        -->
                        <source>${project.build.directory}/jmeter/results/*.jtl</source>

                        <!--
                        directory where to store analysis report files. At least a file "summary.txt" will be stored here.
                        -->
                        <targetDirectory>${project.build.directory}/jmeter/reports</targetDirectory>

                        <processAllFilesFound>true</processAllFilesFound>

                        <!--
                        Defines groups of requests by URL patterns,
                        e.g. URIs starting with /mock/page are associated with group "pages". All analysis results are
                        If there is no such mapping then the threadgroups from the jmeter.xml are used.
                        -->
                        <!--<requestGroups>-->
                        <!--<test>/en-US/firefox/**</test>-->
                        <!--</requestGroups>-->

                        <!--
                        If set to true, additional files "<category>-sizes.csv" and "<category>-durations.csv" will be stored.
                        These files contain detailed information for response size and response durations for every URI.
                        -->
                        <!--generateCSVs>true</generateCSVs-->

                        <!--
                        If set to true, additional chart files "<category>-durations.png" will be created.
                        -->
                        <!--generateCharts>true</generateCharts-->

                        <!-- The database configuration -->

                        <!--userName>xxx</userName>

                        <passWord>xxx</passWord>

                        <dataBase>xxx</dataBase>
                        <host>xxx.xxx.xxx.xxx:3306</host-->

                        <!--
                        Mapping from resource URL to file name. Every resource will be downloaded and stored in 'targetDirectory'
                        with the given filename. Tokens "_FROM_" and "_TO_" can be used as placeholders. These placeholders will
                        be replaced by timestamps of execution interval (formatted as ISO8601, e.g. '20111216T145509+0100').
                        -->
                        <!--<remoteResources>-->
                        <!--<property>-->
                        <!--<name>http://yourhost/path?from=_FROM_&amp;to=_TO_</name>-->
                        <!--<value>my_resource.txt</value>-->
                        <!--</property>-->
                        <!--</remoteResources>-->

                    </configuration>
                </execution>
            </executions>
        </plugin>
    </plugins>
    </build>

</project>